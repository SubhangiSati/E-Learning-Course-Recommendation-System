# -*- coding: utf-8 -*-
"""Backend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vo-gTOOZ9uD-il44c4CyMcNoqe4INq8z

# E-Learning course recommendation system

## Import Libraries
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
print('Dependencies Imported')

"""## Understanding data"""

data = pd.read_csv("/content/Coursera.csv")
data.head(10)

data.info()

data.isnull().sum() #no value is missing

data['University'].value_counts()

data['Difficulty Level'].value_counts()

data['Course Rating'].value_counts()

data['Course Name']

"""#### Columns required for recommendation system :

- Course Name : Names of the courses
- Course Description : Similar courses may have similar course description
- Skills : Users may want to see courses based on same skills
- Difficulty Level : Similar courses as per difficulty level

#### Columns not required for recommendation system :

- Course Ratings : Numerical Column; Ratings can sometimes become a biased factor and distribution is not even
- University : Same university might offer multiple courses in different domains which the user might not want to see
- Course URL : No significance in the recommendation system
"""

data = data[['Course Name','Difficulty Level','Course Description','Skills']]
data.head(5)

"""## Pre-processing of data"""

# Removing spaces between the words (Lambda funtions can be used as well)

data['Course Name'] = data['Course Name'].str.replace(' ',',')
data['Course Name'] = data['Course Name'].str.replace(',,',',')
data['Course Name'] = data['Course Name'].str.replace(':','')
data['Course Description'] = data['Course Description'].str.replace(' ',',')
data['Course Description'] = data['Course Description'].str.replace(',,',',')
data['Course Description'] = data['Course Description'].str.replace('_','')
data['Course Description'] = data['Course Description'].str.replace(':','')
data['Course Description'] = data['Course Description'].str.replace('(','')
data['Course Description'] = data['Course Description'].str.replace(')','')

#removing paranthesis from skills columns
data['Skills'] = data['Skills'].str.replace('(','')
data['Skills'] = data['Skills'].str.replace(')','')
data.head(5)

"""## Creating column for tags"""

data['tags'] = data['Course Name'] + data['Difficulty Level'] + data['Course Description'] + data['Skills']
data.head(5)

data['tags'].iloc[1]

"""## Developing dataframes"""

new_df = data[['Course Name','tags']]
new_df.head(5)
new_df['tags'] = data['tags'].str.replace(',',' ')
new_df['Course Name'] = data['Course Name'].str.replace(',',' ')

new_df.rename(columns = {'Course Name':'course_name'}, inplace = True)
new_df['tags'] = new_df['tags'].apply(lambda x:x.lower()) #lower casing the tags column

new_df.head(5)

new_df.shape #3522 courses with tags and 2 columns (course_name and tags)

"""## Vectorization of Text"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')
vectors = cv.fit_transform(new_df['tags']).toarray()

"""## Apply Stemming"""

import nltk #for stemming process
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
#defining the stemming function
def stem(text):
    y=[]

    for i in text.split():
        y.append(ps.stem(i))

    return " ".join(y)
new_df['tags'] = new_df['tags'].apply(stem) #applying stemming on the tags column

"""## Apply similarity metric"""

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vectors)

"""## Using function for recommendation system"""

def recommend(course):
    course_index = new_df[new_df['course_name'] == course].index[0]
    distances = similarity[course_index]
    course_list = sorted(list(enumerate(distances)),reverse=True, key=lambda x:x[1])[1:7]

    for i in course_list:
        print(new_df.iloc[i[0]].course_name)

recommend('Business Strategy Business Model Canvas Analysis with Miro')
